<?php
/**
 * @file
 * Code for the GSB Feature Workbench feature.
 */

include_once 'gsb_feature_workbench.features.inc';

/**
 * Implements hook_menu_alter().
 */
function gsb_feature_workbench_menu_alter(&$items) {

  // If the workbench sections tab page is defined,
  // we remove it by setting the "access callback" to FALSE

  if (isset($items["admin/workbench/sections"])) {
    $items["admin/workbench/sections"]["access callback"] = FALSE;
  }

  if (isset($items["admin/workbench/content"])) {
    $items["admin/workbench/content"]["title"] = "Content";
  }

}

/**
 * Implements hook_form_alter().
 */
function gsb_feature_workbench_form_alter(&$form, $form_state) {
  // hide the items per page for the workbench pages and set to a default of 30
  if ($form['#id'] == 'views-exposed-form-gsb-workbench-recent-content-page-1' ||
      $form['#id'] == 'views-exposed-form-gsb-workbench-edited-page-1') {
    if (isset($form['items_per_page']['#default_value'])) {
      $form['items_per_page']['#default_value'] = 30;
      $form['items_per_page']['#access'] = FALSE;
    }
    // Set the 'Author' field to size 60, to match 'Update by'
    if (isset($form['secondary']['name'])) {
      $form['secondary']['name']['#size'] = 60;
    }
    // Make the 'Section' a single-line combobox
    if (isset($form['access_id'])) {
      asort($form['access_id']['#options']);
      $any_array = array('-5' => '- Any -');
      $form['access_id']['#options'] = $any_array + $form['access_id']['#options'];
      $form['access_id']['#default_value'] = '-5';
      $form['access_id']['#multiple'] = FALSE;
      unset($form['access_id']['#size']);
      $form['#validate'][] = 'gsb_feature_workbench_form_alter_validate';
    }
    // expand the fieldset on the "all recent" secondary filters
    if ( isset($form_state['input']['name']) ||
         isset($form_state['input']['uid_revision']) ||
         isset($form_state['input']['date_filter']['min']['date']) ||
         isset($form_state['input']['date_filter']['max']['date'])) {
      $form['secondary']['#collapsed'] = FALSE;
    }
  }
  // alter the workbench access select to use a hierarchy_select
  _gsb_feature_workbench_access_select_alter($form, $form_state);
}

function _gsb_feature_workbench_access_select_alter(&$form, $form_state) {

  if (!isset($form['workbench_access'])) {
    return;
  }

  if (isset($form['workbench_access']['#type']) && $form['workbench_access']['#type'] == 'checkbox') {
    return;
  }

  if (count($form['workbench_access']['workbench_access']['#options']) == 1) {
    $form['workbench_access']['workbench_access']['#access'] = FALSE;
    $form['workbench_access']['workbench_access']['#default_value'][] = key($form['workbench_access']['workbench_access']['#options']);
    $form['workbench_access_section'] = array(
      '#markup' => t('Section: @section', array('@section' => reset($form['workbench_access']['workbench_access']['#options']))),
    );
    return;
  }

  $form['workbench_access']['workbench_access']['#type'] = 'hierarchical_select';

  unset($form['workbench_access']['workbench_access']['#options']);

  $vocab_object = _gsb_feature_workbench_get_vocabulary_by_name('workbench_sections');
  $vid = $vocab_object->vid;

  $form['workbench_access']['workbench_access']['#config'] = array(
    'module' => 'hs_taxonomy',
    'params' => array(
      'vid' => $vid,
      'exclude_tid' => NULL,
      'root_term' => NULL,
      'entity_count_for_node_type' => NULL,
    ),
    'save_lineage'    => 0,
    'enforce_deepest' => 0,
    'entity_count'    => 0,
    'require_entity'  => 0,
    'resizable'       => 1,
    'level_labels' => array(
      'status' => 0,
      'labels' => array(
        0 => t('Main category'),
        1 => t('Subcategory'),
        2 => t('Third level category'),
      ),
    ),
    'dropbox' => array(
      'status'   => 1,
      'title'    => t('All selections'),
      'limit'    => 0,
      'reset_hs' => 1,
    ),
    'editability' => array(
      'status'           => 0,
      'item_types'       => array(),
      'allowed_levels'   => array(
        0 => 0,
        1 => 0,
        2 => 1,
      ),
      'allow_new_levels' => 0,
      'max_levels'       => 3,
    ),
    // These settings cannot be configured through the UI: they can only be
    // overridden through code.
    'animation_delay'    => 400,
    'special_items'      => array(),
    'render_flat_select' => 0,
  );

  $element_info = element_info('hierarchical_select');
  $form['workbench_access']['workbench_access']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));

  $form['#validate'][] = '_gsb_feature_workbench_access_select_alter_validate';

}

function _gsb_feature_workbench_access_select_alter_validate(&$form, &$form_state) {
  $new_values = array();
  foreach($form['workbench_access']['workbench_access']['#value'] as $key => $value) {
    $term_id = $value['tid'];
    $new_values[$term_id] = $term_id;
  }
  $form_state['values']['workbench_access'] = $new_values;
}

/**
 * Setup the workbench (section) access_id form values
 */
function gsb_feature_workbench_form_alter_validate(&$form, &$form_state) {
  if (isset($form_state['values']['access_id'])) {
    $access_id = $form_state['values']['access_id'];
    if (isset($form['access_id']) && !is_array($access_id)) {
      form_set_value($form['access_id'], array($access_id => $access_id), $form_state);
    }
  }
}

/**
 * Implements hook_date_popup_process_alter().
 */
function gsb_feature_workbench_date_popup_process_alter(&$element, &$form_state, $context) {

  if (isset($context['form']['#id']) && $context['form']['#id'] == 'views-exposed-form-gsb-workbench-recent-content-page-1') {

    // Hide the date description
    if (isset($element['date']['#description'])) {
      unset($element['date']['#description']);
    }

    // Change the label to be 'Start Date'
    if (isset($element['#id']) && $element['#id'] == 'edit-date-filter-min') {
      $element['#title'] = "Start Date";
    }

    // Change the label to be 'End Date'
    if (isset($element['#id']) && $element['#id'] == 'edit-date-filter-max') {
      $element['#title'] = "End Date";
    }

  }

}

/**
 * Implements hook_views_default_views_alter().
 */
function gsb_feature_workbench_views_default_views_alter(&$views) {

  // Remove the workbench "drafts", "needs review" tabs,
  // by disabling the workbench_moderation view.

  if (isset($views['workbench_moderation'])) {
    $views['workbench_moderation']->disabled = TRUE;
  }

  if (isset($views['workbench_current_user'])) {
    $views['workbench_current_user']->disabled = TRUE;
  }

  if (isset($views['workbench_edited'])) {
    $views['workbench_edited']->disabled = TRUE;
  }

  if (isset($views['workbench_recent_content'])) {
    $views['workbench_recent_content']->disabled = TRUE;
  }

}

/**
 * Implements hook_workbench_content_alter().
 */
function gsb_feature_workbench_workbench_content_alter(&$output) {

  // Remove the "My Profile" block from the workbench page

  if (isset($output['workbench_current_user'])) {
    unset($output['workbench_current_user']);
  }

  // Create a section with add/create links to all the content types
  // the user has access to add/create.

  $node_types_output = '';

  $node_types = _gsb_workbench_get_user_node_types();
  $create_menu = '<ul class="create-menu action-links">';
  foreach ($node_types as $name => $label) {
    $type = str_replace('_', '-', $name);
    $create_menu .= sprintf('<li>%s</li>', l($label, 'node/add/' . $type));
  }
  $create_menu .= '</ul>';
  if ($node_types) {
    $node_types_output .= '<div class="create-menu-title">Create Content</div>';
    $node_types_output .= $create_menu;
  }

  // Find where the rendered output starts, which should be after all the
  // items that start with "#"

  $index = 0;
  foreach($output as $key => $value) {
    if (substr($key, 0, 1) == '#') {
      $index++;
    } else {
      break;
    }
  }

  // Slice the existing output so that we can put our new add/create section at the top
  // of the items that will be rendered

  $output_part1 = array_slice($output, 0, $index);
  $output_part2 = array_slice($output, $index);

  $output = $output_part1;
  $output['node_types_output']['#markup'] = $node_types_output;
  $output = array_merge($output, $output_part2);

  if (isset($output['workbench_edited'])) {
    unset($output['workbench_edited']);
  }

  $output['gsb_workbench_edited'] = array(
    '#view' => 'gsb_workbench_edited',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('right', 'clearfix')),
    '#theme' => 'workbench_element',
  );

  if (isset($output['workbench_recent_content'])) {
    unset($output['workbench_recent_content']);
  }

  $output['gsb_workbench_recent_content'] = array(
    '#view' => 'gsb_workbench_recent_content',
    '#view_display' => 'block_1',
    '#attributes' => array('class' => array('clearfix'), 'style' => array('clear: both;')),
    '#theme' => 'workbench_element',
  );

}

function _gsb_workbench_get_user_node_types() {
  static $types = FALSE;
  if ($types === FALSE) {
    $types = array();
    $node_types = node_type_get_types();
    foreach ($node_types as $name => $node_type) {
      if (node_access('create', $name)) {
        $types[$name] = $node_type->name;
      }
    }
  }
  return $types;
}

function gsb_feature_workbench_views_pre_view(&$view, &$display_id, &$args) {

  // This shorthand variable will increase readability.
  $current_display = $view->current_display;

  // If the current display uses the default fields, target them.
  if ($current_display== 'default' || $view->display[$current_display]->handler->options['defaults']['fields']) {
    $fields = &$view->display['default']->handler->options['fields'];
  }
  // Otherwise, target this display's fields.
  else {
    $fields = &$view->display[$current_display]->handler->options['fields'];
  }

  unset($fields['section']);

  // This temporary variable will take all the values from
  // the existing fields array and add a section field after the nid_1.
  $new_view_fields = array();
  foreach ($fields as $key => $value) {
    $new_view_fields[$key] = $value;
    if ($key == 'nid_1') {
      $new_view_fields['section'] = _workbench_access_views_section_field_definition();
    }
  }

  // Set the new fields array on the actual view.
  $fields = $new_view_fields;
}

 /**
 * This function will return a vocabulary object which matches the
 * given machine_name. Will return null if no such vocabulary exists.
 *
 * @param String $vocabulary_name
 *   This is the machine_name of the section which is required
 * @return Object
 *   This is the vocabulary object with the name
 *   or null if no such vocabulary exists
 */
function _gsb_feature_workbench_get_vocabulary_by_name($vocabulary_name) {
  $vocabs = taxonomy_get_vocabularies(NULL);
  foreach ($vocabs as $vocab_object) {
    if ($vocab_object->machine_name == $vocabulary_name) {
      return $vocab_object;
    }
  }
  return NULL;
}

